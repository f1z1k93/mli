#include "scanner.h"
#include "tables.h"
class  Parser {
public:
	Parser(t_cstr name_file, Table<Lex> *poliz);
	~Parser();
	void parser();
private:
	Lex lex;
	Scanner scanner;
	Table<Lex> *poliz;
	int mono_num;
	Table<int *> break_table;
	Table<int *> continue_table;
	Table<int *> or_table;
	Table<int *> and_table;
	int num_break, num_continue;
	int argc;
	bool is_func, is_const;
	Table<t_lex> type_stack;
	bool is_cycle, is_switch;
	int num_call_func;
	t_lex dtype;
	Lex dconst;
	char *name;
	Table<Ident> global_table;
	Table<Ident> local_table;
	Table<Ident> func_table;
	Table<Ident> *table;
	Table<int> 	arr;
	int num_table;
	int num_id;
	int ret_num;
	void scan_lex(t_lex needed_lex, t_cstr str_err);
	bool is_type(t_lex lex_type);
	bool is_bool_operation(t_lex type);
	int  find(Table<Ident> *table, char *name);
	void check_types_minus_plus();
	void check_types_not();
	void check_types_with_str();
	void check_types_math();
	void check_types_assign();
	void check_types_bool();
	void check_type_fgo();
	void check_types_cmp();
	void check_types_mod();
	void program();
	void global_declarations();
	void global_declaration();
	void declaration();
	void array();
	void array_size();
	void init();
	void function();
	void arguments();
	void main_arguments();
	void body();
	void body_operator();
	void block();
	void operator_();
	void operator_if();
	void operator_while();
	void operator_do();
	void operator_for();
	void operator_switch();
	void operator_read();
	void operator_write();
	void operator_break();
	void operator_continue();
	void operator_return();
	void operator_simple();
	void expression();
	void value();
	void or_value();
	void and_value();
	void bool_value();
	void add_value();
	void mul_value();
	void mono();
	void mono1();
	void index();
	void call_func();
	void var_ident();
	void type();
	void constant();
	void bool_operation();
	void variable();
	void id();
	void not_();
};
